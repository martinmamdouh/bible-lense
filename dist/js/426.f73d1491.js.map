{"version":3,"file":"js/426.f73d1491.js","mappings":"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","sources":["webpack://biblical-catalyst/./src/views/canvases/CanvasPage.vue","webpack://biblical-catalyst/./src/components/canvases/CanvasOne.vue","webpack://biblical-catalyst/./node_modules/marked/lib/marked.esm.js","webpack://biblical-catalyst/src/components/canvases/CanvasOne.vue","webpack://biblical-catalyst/./src/components/canvases/CanvasOne.vue?3953","webpack://biblical-catalyst/./src/components/canvases/CanvasOne.vue?70a4","webpack://biblical-catalyst/src/views/canvases/CanvasPage.vue","webpack://biblical-catalyst/./src/views/canvases/CanvasPage.vue?237a","webpack://biblical-catalyst/./src/views/canvases/CanvasPage.vue?6e09","webpack://biblical-catalyst/../../../src/components/VResponsive/VResponsive.ts"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('canvas-one',{attrs:{\"items\":_vm.items,\"category\":_vm.category}})\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return (_vm.items)?_c('v-row',{attrs:{\"dense\":\"\"}},[(_vm.$vuetify.breakpoint.smAndUp && !_vm.fullscreen)?_c('v-col',{attrs:{\"cols\":\"12\",\"sm\":_vm.fullscreen ? 1 : 3}},[_c('v-card',{staticClass:\"fixed-nav px-2\",attrs:{\"height\":\"100%\",\"flat\":\"\"}},[(!_vm.fullscreen)?_c('v-card-title',{staticClass:\"capitalize navy\",attrs:{\"primary-title\":\"\"}},[_vm._v(\" \"+_vm._s(_vm.category)+\" \")]):_vm._e(),(!_vm.fullscreen)?_c('v-card-text',{staticClass:\"scroll\"},[_c('v-list',{attrs:{\"flat\":\"\"}},[_c('v-list-item-group',{staticClass:\"maroon\",attrs:{\"value\":_vm.activeListItem,\"mandatory\":\"\"}},_vm._l((_vm.items),function(item,i){return _c('v-list-item',{key:i,staticClass:\"list-itemss\"},[_c('v-list-item-content',[_c('v-list-item-title',{on:{\"click\":function($event){_vm.selectedItem = item;\n                    _vm.onSelectItem();}}},[_c('small',[_vm._v(_vm._s(item.title))])])],1)],1)}),1)],1)],1):_c('v-card-text',{staticClass:\"scroll capitalize\"},[_c('v-btn',{attrs:{\"icon\":\"\"},on:{\"click\":function($event){_vm.fullscreen = false}}},[_c('v-icon',[_vm._v(\"mdi-arrow-right\")])],1)],1)],1)],1):_vm._e(),_c('v-col',{attrs:{\"cols\":\"11\",\"sm\":_vm.fullscreen ? 11 : 6}},[_c('v-card',{attrs:{\"width\":\"100%\",\"flat\":\"\"}},[_c('div',{staticClass:\"capitalize px-4\",class:{\n          'fixed-title-full': _vm.fullscreen,\n          'fixed-title': !_vm.fullscreen,\n        }},[_c('div',[_c('v-btn',{attrs:{\"text\":\"\",\"color\":\"#b78727\"},on:{\"click\":function($event){return _vm.$router.push({ name: 'homePage' })}}},[_vm._v(\"Home\")]),_vm._v(\" / \"),_c('v-btn',{attrs:{\"text\":\"\",\"color\":\"grey\",\"disabled\":\"\"}},[_vm._v(_vm._s(_vm.category))])],1),_c('v-row',{staticClass:\"pb-2\",attrs:{\"dense\":\"\",\"align\":\"center\"}},[_c('v-col',{attrs:{\"sm\":\"10\",\"cols\":\"12\"}},[_c('v-select',{staticClass:\"sm-font bold\",attrs:{\"items\":_vm.items,\"item-text\":\"title\",\"label\":\"select\",\"return-object\":\"\",\"dense\":\"\",\"solo\":\"\",\"flat\":\"\",\"fill\":\"\",\"full-width\":\"\",\"hide-details\":\"\",\"color\":\"white\"},on:{\"input\":_vm.onSelectItem},model:{value:(_vm.selectedItem),callback:function ($$v) {_vm.selectedItem=$$v},expression:\"selectedItem\"}})],1),(_vm.$vuetify.breakpoint.smAndUp)?_c('v-col',{attrs:{\"cols\":\"12\",\"sm\":\"2\"}},[_c('v-btn',{staticClass:\"mr-2\",attrs:{\"icon\":\"\",\"x-small\":\"\",\"color\":\"#b78727\"},on:{\"click\":function($event){_vm.fullscreen = !_vm.fullscreen}}},[_c('v-icon',[_vm._v(\" \"+_vm._s(_vm.fullscreen ? \"mdi-fullscreen-exit\" : \"mdi-fullscreen\")+\" \")])],1),_c('v-btn',{staticClass:\"pr-2\",attrs:{\"color\":\"#b78727\",\"x-small\":\"\",\"icon\":\"\"}},[_c('v-icon',[_vm._v(\"mdi-share-variant\")])],1)],1):_vm._e()],1),_c('v-divider')],1),_c('v-card-text',{staticClass:\"card-text\"},[(Object.keys(_vm.selectedItem.properties).length > 0)?_c('section',[_vm._l((Object.keys(_vm.selectedItem.properties)),function(key,z){return _c('div',{key:z},[_c('label',{staticClass:\"navy capitalize\"},[_vm._v(_vm._s(key)+\":\")]),_vm._v(\" \"+_vm._s(_vm.selectedItem.properties[key])+\" \")])}),_c('v-divider',{staticClass:\"my-2\"})],2):_vm._e(),(_vm.selectedItem.isMarkDown)?_c('section',[_c('div',{staticClass:\"markdown\",domProps:{\"innerHTML\":_vm._s(_vm.parseMarkDown(_vm.selectedItem.markDown))}})]):_c('section',[_c('h3',{staticClass:\"maroon\"}),_c('div',[_vm._v(_vm._s(_vm.selectedItem.interpretation))])]),(_vm.selectedItem.bibleVerses)?_c('section',{staticClass:\"mt-4\"},[_c('h3',{staticClass:\"maroon mb-4\"},[_vm._v(\" \"+_vm._s(_vm.$store.state.locale == \"ar\" ? \"آيات ذات صلة من الكتاب المقدس\" : \"Related Verses from The Bible\")+\" \")]),_vm._l((_vm.selectedItem.bibleVerses),function(verse,v){return _c('v-card',{key:v,staticClass:\"elevation-6 mb-4 verse-card\"},[_c('v-card-text',[_vm._v(\" “\"+_vm._s(verse)+\"” \")])],1)})],2):_vm._e(),(_vm.selectedItem.references.length)?_c('section',[_c('h3',{staticClass:\"maroon mb-4\"},[_vm._v(\" \"+_vm._s(_vm.$store.state.locale == \"ar\" ? \"مصادر\" : \"References\")+\" \")]),_vm._l((_vm.selectedItem.references),function(reference,w){return _c('v-responsive',{key:w,attrs:{\"aspect-ratio\":\"16/9\"}},[_c('iframe',{staticClass:\"main-img\",attrs:{\"width\":\"300\",\"height\":\"200\",\"src\":`https://www.youtube.com/embed/${reference}`,\"frameborder\":\"0\",\"allowfullscreen\":\"\"}})])})],2):_vm._e()])],1)],1),(!_vm.fullscreen)?_c('v-col',{staticClass:\"fixed-img\",attrs:{\"cols\":\"12\"}},[_c('div',{staticClass:\"mt-4\"},[_c('h4',{staticClass:\"maroon\"},[_vm._v(\" \"+_vm._s(_vm.$store.state.locale == \"ar\" ? \"مصادر\" : \"Resources\")+\" \")]),_c('v-responsive',{staticClass:\"mb-4\",attrs:{\"aspect-ratio\":\"16/9\"}},[_c('iframe',{attrs:{\"width\":\"200\",\"height\":\"150\",\"src\":\"https://www.youtube.com/embed/C3qL54EnW20\",\"frameborder\":\"2\",\"allowfullscreen\":\"\"}})]),_c('v-responsive',{attrs:{\"aspect-ratio\":\"16/9\"}},[_c('iframe',{attrs:{\"width\":\"200\",\"height\":\"150\",\"src\":\"https://www.youtube.com/embed/7bIUIFMZY6c\",\"frameborder\":\"2\",\"allowfullscreen\":\"\"}})])],1)]):_vm._e()],1):_vm._e()\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/**\n * marked v11.0.0 - a markdown parser\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null\n    };\n}\nlet _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape$1(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nfunction unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        }\n    };\n    return obj;\n}\nfunction cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch (e) {\n        return null;\n    }\n    return href;\n}\nconst noopTest = { exec: () => null };\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape$1(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text)\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape$1(text)\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0]\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ {1,4}/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: cap[0]\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            const text = rtrim(cap[0].replace(/^ *>[ \\t]?/gm, ''), '\\n');\n            const top = this.lexer.state.top;\n            this.lexer.state.top = true;\n            const tokens = this.lexer.blockTokens(text);\n            this.lexer.state.top = top;\n            return {\n                type: 'blockquote',\n                raw: cap[0],\n                tokens,\n                text\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: []\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let raw = '';\n            let itemContents = '';\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                let blankLine = false;\n                if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(src)) {\n                            break;\n                        }\n                        if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLine.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLine.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n *\\n *$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: []\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = raw.trimEnd();\n            (list.items[list.items.length - 1]).text = itemContents.trimEnd();\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0]\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!/[:|]/.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(/^\\||\\| *$/g, '').split('|');\n        const rows = cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: []\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (/^ *-+: *$/.test(align)) {\n                item.align.push('right');\n            }\n            else if (/^ *:-+: *$/.test(align)) {\n                item.align.push('center');\n            }\n            else if (/^ *:-+ *$/.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (const header of headers) {\n            item.header.push({\n                text: header,\n                tokens: this.lexer.inline(header)\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map(cell => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell)\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1])\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0])\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape$1(cap[1])\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0]\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text)\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text)\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape$1(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0]\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2])\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape$1(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = escape$1(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = cap[0];\n            }\n            else {\n                text = escape$1(cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n}\n\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?: *(?:\\n|$))+/;\nconst blockCode = /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheading = edit(/^(?!bull )((?:.|\\n(?!\\s*?\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n    + '|track|ul';\nconst _comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', ' {4}[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex()\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex()\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = '\\\\p{P}$+<=>`^|~';\nconst punctuation = edit(/^((?![*_])[\\spunctuation])/, 'u')\n    .replace(/punctuation/g, _punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)[punct](_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter\n    + '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\([punct])/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex()\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    escape: edit(escape).replace('])', '~|])').getRegex(),\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex()\n};\n/**\n * exports\n */\nconst block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic\n};\nconst inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic\n};\n\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        let next;\n        while (next = this.inlineQueue.shift()) {\n            this.inlineTokens(next.src, next.tokens);\n        }\n        return this.tokens;\n    }\n    blockTokens(src, tokens = []) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        else {\n            src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n                return leading + '    '.repeat(tabs.length);\n            });\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        let lastParagraphClipped;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    code(code, infostring, escaped) {\n        const lang = (infostring || '').match(/^\\S*/)?.[0];\n        code = code.replace(/\\n$/, '') + '\\n';\n        if (!lang) {\n            return '<pre><code>'\n                + (escaped ? code : escape$1(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape$1(lang)\n            + '\">'\n            + (escaped ? code : escape$1(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote(quote) {\n        return `<blockquote>\\n${quote}</blockquote>\\n`;\n    }\n    html(html, block) {\n        return html;\n    }\n    heading(text, level, raw) {\n        // ignore IDs\n        return `<h${level}>${text}</h${level}>\\n`;\n    }\n    hr() {\n        return '<hr>\\n';\n    }\n    list(body, ordered, start) {\n        const type = ordered ? 'ol' : 'ul';\n        const startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(text, task, checked) {\n        return `<li>${text}</li>\\n`;\n    }\n    checkbox(checked) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph(text) {\n        return `<p>${text}</p>\\n`;\n    }\n    table(header, body) {\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow(content) {\n        return `<tr>\\n${content}</tr>\\n`;\n    }\n    tablecell(content, flags) {\n        const type = flags.header ? 'th' : 'td';\n        const tag = flags.align\n            ? `<${type} align=\"${flags.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong(text) {\n        return `<strong>${text}</strong>`;\n    }\n    em(text) {\n        return `<em>${text}</em>`;\n    }\n    codespan(text) {\n        return `<code>${text}</code>`;\n    }\n    br() {\n        return '<br>';\n    }\n    del(text) {\n        return `<del>${text}</del>`;\n    }\n    link(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(text) {\n        return text;\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong(text) {\n        return text;\n    }\n    em(text) {\n        return text;\n    }\n    codespan(text) {\n        return text;\n    }\n    del(text) {\n        return text;\n    }\n    html(text) {\n        return text;\n    }\n    text(text) {\n        return text;\n    }\n    link(href, title, text) {\n        return '' + text;\n    }\n    image(href, title, text) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const genericToken = token;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'space': {\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr();\n                    continue;\n                }\n                case 'heading': {\n                    const headingToken = token;\n                    out += this.renderer.heading(this.parseInline(headingToken.tokens), headingToken.depth, unescape(this.parseInline(headingToken.tokens, this.textRenderer)));\n                    continue;\n                }\n                case 'code': {\n                    const codeToken = token;\n                    out += this.renderer.code(codeToken.text, codeToken.lang, !!codeToken.escaped);\n                    continue;\n                }\n                case 'table': {\n                    const tableToken = token;\n                    let header = '';\n                    // header\n                    let cell = '';\n                    for (let j = 0; j < tableToken.header.length; j++) {\n                        cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens), { header: true, align: tableToken.align[j] });\n                    }\n                    header += this.renderer.tablerow(cell);\n                    let body = '';\n                    for (let j = 0; j < tableToken.rows.length; j++) {\n                        const row = tableToken.rows[j];\n                        cell = '';\n                        for (let k = 0; k < row.length; k++) {\n                            cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: tableToken.align[k] });\n                        }\n                        body += this.renderer.tablerow(cell);\n                    }\n                    out += this.renderer.table(header, body);\n                    continue;\n                }\n                case 'blockquote': {\n                    const blockquoteToken = token;\n                    const body = this.parse(blockquoteToken.tokens);\n                    out += this.renderer.blockquote(body);\n                    continue;\n                }\n                case 'list': {\n                    const listToken = token;\n                    const ordered = listToken.ordered;\n                    const start = listToken.start;\n                    const loose = listToken.loose;\n                    let body = '';\n                    for (let j = 0; j < listToken.items.length; j++) {\n                        const item = listToken.items[j];\n                        const checked = item.checked;\n                        const task = item.task;\n                        let itemBody = '';\n                        if (item.task) {\n                            const checkbox = this.renderer.checkbox(!!checked);\n                            if (loose) {\n                                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                                    }\n                                }\n                                else {\n                                    item.tokens.unshift({\n                                        type: 'text',\n                                        text: checkbox + ' '\n                                    });\n                                }\n                            }\n                            else {\n                                itemBody += checkbox + ' ';\n                            }\n                        }\n                        itemBody += this.parse(item.tokens, loose);\n                        body += this.renderer.listitem(itemBody, task, !!checked);\n                    }\n                    out += this.renderer.list(body, ordered, start);\n                    continue;\n                }\n                case 'html': {\n                    const htmlToken = token;\n                    out += this.renderer.html(htmlToken.text, htmlToken.block);\n                    continue;\n                }\n                case 'paragraph': {\n                    const paragraphToken = token;\n                    out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);\n                    }\n                    out += top ? this.renderer.paragraph(body) : body;\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'escape': {\n                    const escapeToken = token;\n                    out += renderer.text(escapeToken.text);\n                    break;\n                }\n                case 'html': {\n                    const tagToken = token;\n                    out += renderer.html(tagToken.text);\n                    break;\n                }\n                case 'link': {\n                    const linkToken = token;\n                    out += renderer.link(linkToken.href, linkToken.title, this.parseInline(linkToken.tokens, renderer));\n                    break;\n                }\n                case 'image': {\n                    const imageToken = token;\n                    out += renderer.image(imageToken.href, imageToken.title, imageToken.text);\n                    break;\n                }\n                case 'strong': {\n                    const strongToken = token;\n                    out += renderer.strong(this.parseInline(strongToken.tokens, renderer));\n                    break;\n                }\n                case 'em': {\n                    const emToken = token;\n                    out += renderer.em(this.parseInline(emToken.tokens, renderer));\n                    break;\n                }\n                case 'codespan': {\n                    const codespanToken = token;\n                    out += renderer.codespan(codespanToken.text);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br();\n                    break;\n                }\n                case 'del': {\n                    const delToken = token;\n                    out += renderer.del(this.parseInline(delToken.tokens, renderer));\n                    break;\n                }\n                case 'text': {\n                    const textToken = token;\n                    out += renderer.text(textToken.text);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess'\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n    parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            values = values.concat(this.walkTokens(genericToken[childTokens], callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer) || prop === 'options') {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer) || ['options', 'rules', 'lexer'].includes(prop)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks) || prop === 'options') {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    #parseMarkdown(lexer, parser) {\n        return (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            // Show warning if an extension set async to true but the parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                if (!opt.silent) {\n                    console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n                }\n                opt.async = true;\n            }\n            const throwError = this.#onError(!!opt.silent, !!opt.async);\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n            }\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                const tokens = lexer(src, opt);\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n    }\n    #onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape$1(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n//# sourceMappingURL=marked.esm.js.map\n","<template>\n  <v-row v-if=\"items\" dense>\n    <!-- Side navigatin column -->\n    <v-col\n      v-if=\"$vuetify.breakpoint.smAndUp && !fullscreen\"\n      cols=\"12\"\n      :sm=\"fullscreen ? 1 : 3\"\n    >\n      <v-card height=\"100%\" flat class=\"fixed-nav px-2\">\n        <v-card-title v-if=\"!fullscreen\" primary-title class=\"capitalize navy\">\n          {{ category }}\n        </v-card-title>\n        <v-card-text v-if=\"!fullscreen\" class=\"scroll\">\n          <v-list flat>\n            <v-list-item-group :value=\"activeListItem\" mandatory class=\"maroon\">\n              <v-list-item\n                v-for=\"(item, i) in items\"\n                :key=\"i\"\n                class=\"list-itemss\"\n              >\n                <v-list-item-content>\n                  <v-list-item-title\n                    @click=\"\n                      selectedItem = item;\n                      onSelectItem();\n                    \"\n                  >\n                    <small>{{ item.title }}</small>\n                  </v-list-item-title>\n                </v-list-item-content>\n              </v-list-item>\n            </v-list-item-group>\n          </v-list>\n        </v-card-text>\n        <v-card-text v-else class=\"scroll capitalize\">\n          <v-btn icon @click=\"fullscreen = false\">\n            <v-icon>mdi-arrow-right</v-icon>\n          </v-btn>\n        </v-card-text>\n      </v-card>\n      <!-- Main Screen 'Content' -->\n    </v-col>\n    <!-- Content column -->\n    <v-col cols=\"11\" :sm=\"fullscreen ? 11 : 6\">\n      <v-card width=\"100%\" flat>\n        <div\n          class=\"capitalize px-4\"\n          :class=\"{\n            'fixed-title-full': fullscreen,\n            'fixed-title': !fullscreen,\n          }\"\n        >\n          <div>\n            <v-btn\n              text\n              color=\"#b78727\"\n              @click=\"$router.push({ name: 'homePage' })\"\n              >Home</v-btn\n            >\n            /\n            <v-btn text color=\"grey\" disabled>{{ category }}</v-btn>\n          </div>\n          <v-row dense class=\"pb-2\" align=\"center\">\n            <v-col sm=\"10\" cols=\"12\">\n              <v-select\n                v-model=\"selectedItem\"\n                :items=\"items\"\n                item-text=\"title\"\n                label=\"select\"\n                return-object\n                dense\n                solo\n                flat\n                fill\n                full-width\n                hide-details\n                color=\"white\"\n                class=\"sm-font bold\"\n                @input=\"onSelectItem\"\n              ></v-select>\n            </v-col>\n\n            <v-col v-if=\"$vuetify.breakpoint.smAndUp\" cols=\"12\" sm=\"2\">\n              <v-btn\n                icon\n                x-small\n                class=\"mr-2\"\n                color=\"#b78727\"\n                @click=\"fullscreen = !fullscreen\"\n              >\n                <v-icon>\n                  {{ fullscreen ? \"mdi-fullscreen-exit\" : \"mdi-fullscreen\" }}\n                </v-icon>\n              </v-btn>\n              <v-btn color=\"#b78727\" x-small icon class=\"pr-2\">\n                <v-icon>mdi-share-variant</v-icon>\n              </v-btn>\n            </v-col>\n          </v-row>\n          <v-divider></v-divider>\n        </div>\n        <v-card-text class=\"card-text\">\n          <!-- <v-img\n            src=\"@/assets/images/dreams.jpg\"\n            height=\"auto\"\n            width=\"auto\"\n            class=\"mb-4 main-img\"\n          ></v-img> -->\n          <section v-if=\"Object.keys(selectedItem.properties).length > 0\">\n            <div\n              v-for=\"(key, z) in Object.keys(selectedItem.properties)\"\n              :key=\"z\"\n            >\n              <label class=\"navy capitalize\">{{ key }}:</label>\n              {{ selectedItem.properties[key] }}\n            </div>\n            <v-divider class=\"my-2\" />\n          </section>\n          <section v-if=\"selectedItem.isMarkDown\">\n            <div\n              v-html=\"parseMarkDown(selectedItem.markDown)\"\n              class=\"markdown\"\n            ></div>\n          </section>\n          <section v-else>\n            <h3 class=\"maroon\"></h3>\n            <div>{{ selectedItem.interpretation }}</div>\n          </section>\n          <section v-if=\"selectedItem.bibleVerses\" class=\"mt-4\">\n            <h3 class=\"maroon mb-4\">\n              {{\n                $store.state.locale == \"ar\"\n                  ? \"آيات ذات صلة من الكتاب المقدس\"\n                  : \"Related Verses from The Bible\"\n              }}\n            </h3>\n            <v-card\n              v-for=\"(verse, v) in selectedItem.bibleVerses\"\n              :key=\"v\"\n              class=\"elevation-6 mb-4 verse-card\"\n            >\n              <v-card-text> &ldquo;{{ verse }}&rdquo; </v-card-text>\n            </v-card>\n          </section>\n          <section v-if=\"selectedItem.references.length\">\n            <h3 class=\"maroon mb-4\">\n              {{ $store.state.locale == \"ar\" ? \"مصادر\" : \"References\" }}\n            </h3>\n\n            <v-responsive\n              v-for=\"(reference, w) in selectedItem.references\"\n              :key=\"w\"\n              aspect-ratio=\"16/9\"\n            >\n              <iframe\n                width=\"300\"\n                height=\"200\"\n                :src=\"`https://www.youtube.com/embed/${reference}`\"\n                frameborder=\"0\"\n                allowfullscreen\n                class=\"main-img\"\n              ></iframe>\n            </v-responsive>\n          </section>\n        </v-card-text>\n      </v-card>\n    </v-col>\n    <!-- Image column -->\n    <v-col v-if=\"!fullscreen\" cols=\"12\" class=\"fixed-img\">\n      <!-- <div>\n        <v-img\n          src=\"@/assets/images/dreams.jpg\"\n          height=\"50%\"\n          width=\"auto\"\n        ></v-img>\n      </div> -->\n      <div class=\"mt-4\">\n        <h4 class=\"maroon\">\n          {{ $store.state.locale == \"ar\" ? \"مصادر\" : \"Resources\" }}\n        </h4>\n        <v-responsive aspect-ratio=\"16/9\" class=\"mb-4\">\n          <iframe\n            width=\"200\"\n            height=\"150\"\n            src=\"https://www.youtube.com/embed/C3qL54EnW20\"\n            frameborder=\"2\"\n            allowfullscreen\n          ></iframe>\n        </v-responsive>\n        <v-responsive aspect-ratio=\"16/9\">\n          <iframe\n            width=\"200\"\n            height=\"150\"\n            src=\"https://www.youtube.com/embed/7bIUIFMZY6c\"\n            frameborder=\"2\"\n            allowfullscreen\n          ></iframe>\n        </v-responsive>\n      </div>\n    </v-col>\n  </v-row>\n</template>\n<script>\nimport { marked } from \"marked\";\nexport default {\n  props: {\n    items: { type: Array, required: true },\n    category: { type: String, required: true },\n  },\n  data() {\n    return {\n      selectedItem: {},\n      activeListItem: {},\n      fullscreen: false,\n      ulr: null,\n      currentCategory: null,\n      breadcrumbs: [\n        {\n          text: \"Home\",\n          disabled: false,\n          href: \"homePage\",\n        },\n      ],\n    };\n  },\n  created() {\n    const itemId = this.$route.query.itemId;\n    this.selectedItem = itemId ? this.items[itemId - 1] : this.items[0];\n    this.activeListItem = itemId - 1;\n    this.url = this.$route.path;\n    this.breadcrumbs.push({\n      text: this.category,\n      disabled: true,\n      href: \"\",\n    });\n  },\n  methods: {\n    onSelectItem() {\n      this.$router.push({ query: { itemId: this.selectedItem.id } });\n    },\n    parseMarkDown(content) {\n      return marked.parse(content);\n    },\n  },\n};\n</script>\n<style scoped>\n.scroll {\n  overflow-y: scroll;\n  height: 600px;\n}\n.capitalize {\n  text-transform: capitalize;\n}\n.list-item {\n  text-transform: capitalize;\n  font-size: 8px !important;\n}\n\nh3 {\n  margin-bottom: 2px;\n  margin-top: 2px;\n}\n.fixed-title {\n  position: fixed !important;\n  top: 70px;\n  left: 25%;\n  width: 50%;\n  background-color: white;\n  z-index: 1000;\n  /* height: 100px;\n  overflow: hidden; */\n  font-size: 14px;\n}\n.fixed-title-full {\n  position: fixed !important;\n  top: 70px;\n  width: 100%;\n  background-color: white;\n  z-index: 1000;\n  /* height: 100px;\n  overflow: hidden; */\n  font-size: 14px;\n}\n.fixed-breadcrumbs {\n  position: fixed;\n  top: 60px;\n  left: 0%;\n  width: 100%;\n  background-color: white;\n  z-index: 1000;\n}\n\n.fixed-nav {\n  position: fixed;\n  top: 70px;\n  width: 25%;\n  left: 0%;\n}\n.fixed-img {\n  position: fixed;\n  top: 13%;\n  width: 24%;\n  right: 0%;\n}\n.card-text {\n  margin-top: 80px;\n}\n.main-img {\n  display: none;\n}\n.sm-font {\n  font-size: 14px !important;\n}\n.bold {\n  font-weight: bold;\n}\n::v-deep .markdown h1 {\n  color: #800000 !important;\n  margin-bottom: 10px !important;\n}\n::v-deep .markdown h2 {\n  color: #800000 !important;\n  margin-bottom: 10px !important;\n}\n::v-deep .markdown h3 {\n  color: #800000 !important;\n  margin-bottom: 10px !important;\n}\n::v-deep .markdown h4 {\n  color: #800000 !important;\n  margin-bottom: 10px !important;\n}\nheader {\n  color: #800000;\n  margin-bottom: 10px;\n}\n.verse-card {\n  border-left: 4px solid #800000 !important;\n}\n@media (max-width: 576px) {\n  .main-img {\n    display: block;\n  }\n  .breadcrumbs {\n    height: 20px;\n    width: 100%;\n    background-color: white;\n    z-index: 1000;\n  }\n  .fixed-title,\n  .fixed-title-full {\n    position: sticky !important;\n    top: 15px;\n    left: 0%;\n    width: 100%;\n    background-color: white;\n    z-index: 10;\n    font-size: 10px;\n    line-height: 20px;\n  }\n  .fixed-nav {\n    display: none;\n  }\n  .fixed-img {\n    display: none;\n  }\n\n  .card-text {\n    margin-top: 0px;\n  }\n  .sm-font {\n    font-size: 9px !important;\n  }\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./CanvasOne.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./CanvasOne.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./CanvasOne.vue?vue&type=template&id=45de1cf6&scoped=true\"\nimport script from \"./CanvasOne.vue?vue&type=script&lang=js\"\nexport * from \"./CanvasOne.vue?vue&type=script&lang=js\"\nimport style0 from \"./CanvasOne.vue?vue&type=style&index=0&id=45de1cf6&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"45de1cf6\",\n  null\n  \n)\n\nexport default component.exports","<template>\n  <canvas-one :items=\"items\" :category=\"category\" />\n</template>\n<script>\nimport CanvasOne from \"@/components/canvases/CanvasOne.vue\";\nimport { loadJsData } from \"@/utilities/DataLoader\";\nexport default {\n  components: { CanvasOne },\n  props: {\n    canvasType: { required: true },\n    dataSet: { type: String },\n    category: { type: String },\n  },\n  data() {\n    return { items: null };\n  },\n  created() {\n    // this.items = loadJsonData(this.dataSet)[\"en\"];\n\n    this.items = loadJsData(this.dataSet)[this.$store.state.locale];\n  },\n};\n</script>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./CanvasPage.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./CanvasPage.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./CanvasPage.vue?vue&type=template&id=42d26ee2\"\nimport script from \"./CanvasPage.vue?vue&type=script&lang=js\"\nexport * from \"./CanvasPage.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import './VResponsive.sass'\n\n// Mixins\nimport Measurable, { NumberOrNumberString } from '../../mixins/measurable'\n\n// Types\nimport { VNode } from 'vue'\n\n// Utils\nimport mixins from '../../util/mixins'\nimport { getSlot } from '../../util/helpers'\n\n/* @vue/component */\nexport default mixins(Measurable).extend({\n  name: 'v-responsive',\n\n  props: {\n    aspectRatio: [String, Number] as NumberOrNumberString,\n    contentClass: String,\n  },\n\n  computed: {\n    computedAspectRatio (): number {\n      return Number(this.aspectRatio)\n    },\n    aspectStyle (): object | undefined {\n      return this.computedAspectRatio\n        ? { paddingBottom: (1 / this.computedAspectRatio) * 100 + '%' }\n        : undefined\n    },\n    __cachedSizer (): VNode | [] {\n      if (!this.aspectStyle) return []\n\n      return this.$createElement('div', {\n        style: this.aspectStyle,\n        staticClass: 'v-responsive__sizer',\n      })\n    },\n  },\n\n  methods: {\n    genContent (): VNode {\n      return this.$createElement('div', {\n        staticClass: 'v-responsive__content',\n        class: this.contentClass,\n      }, getSlot(this))\n    },\n  },\n\n  render (h): VNode {\n    return h('div', {\n      staticClass: 'v-responsive',\n      style: this.measurableStyles,\n      on: this.$listeners,\n    }, [\n      this.__cachedSizer,\n      this.genContent(),\n    ])\n  },\n})\n"],"names":["render","_vm","this","_c","_self","attrs","items","category","staticRenderFns","fullscreen","staticClass","_v","key","class","onSelectItem","on","model","value","selectedItem","callback","expression","Object","keys","_e","domProps","references","length","_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","_defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape$1","html","encode","test","replace","unescapeTest","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","obj","name","val","valSource","getRegex","cleanUrl","href","encodeURI","e","noopTest","exec","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","i","trim","shift","pop","splice","push","rtrim","c","invert","l","suffLen","currChar","slice","findClosingBracket","b","indexOf","level","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","_Tokenizer","options","rules","constructor","space","src","block","newline","code","codeBlockStyle","fences","lang","inline","anyPunctuation","heading","trimmed","depth","hr","blockquote","top","blockTokens","list","bull","isordered","ordered","start","loose","itemRegex","itemContents","endsWithBlankLine","endEarly","line","t","repeat","nextLine","indent","trimStart","search","blankLine","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","rawLine","ischecked","istask","task","checked","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","table","headers","aligns","rows","item","header","align","cell","lheading","paragraph","escape","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","reflink","links","nolink","linkString","emStrong","maskedSrc","prevChar","emStrongLDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","emStrongRDelimAst","emStrongRDelimUnd","lastIndex","lastCharLength","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","blockCode","bullet","_paragraph","blockText","_blockLabel","_tag","_comment","blockNormal","gfmTable","blockGfm","blockPedantic","inlineCode","_punctuation","blockSkip","_inlineComment","_inlineLabel","reflinkSearch","inlineNormal","inlinePedantic","inlineGfm","inlineBreaks","normal","_Lexer","inlineQueue","create","static","lex","next","lastToken","cutSrc","lastParagraphClipped","leading","tabs","extTokenizer","call","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keepPrevChar","includes","lastIndexOf","startInline","_Renderer","infostring","quote","body","startatt","listitem","checkbox","tablerow","content","tablecell","flags","strong","em","cleanHref","out","image","_TextRenderer","_Parser","textRenderer","parser","parse","parseInline","renderers","genericToken","ret","headingToken","codeToken","tableToken","j","k","blockquoteToken","listToken","itemBody","unshift","htmlToken","paragraphToken","textToken","escapeToken","tagToken","linkToken","imageToken","strongToken","emToken","codespanToken","delToken","_Hooks","Set","preprocess","markdown","postprocess","Marked","defaults","setOptions","lexInline","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","args","use","values","concat","childTokens","pack","opts","ext","prevRenderer","apply","extLevel","prop","rendererProp","rendererFunc","tokenizerProp","tokenizerFunc","prevTokenizer","hooksProp","hooksFunc","prevHook","passThroughHooks","has","arg","Promise","resolve","then","packWalktokens","origOpt","warn","throwError","prototype","toString","all","catch","message","msg","reject","markedInstance","marked","getDefaults","props","Array","required","data","activeListItem","ulr","currentCategory","breadcrumbs","disabled","created","itemId","$route","query","path","methods","$router","id","parseMarkDown","component","components","CanvasOne","canvasType","dataSet","loadJsData","$store","locale","mixins","Measurable","extend","aspectRatio","Number","contentClass","computed","computedAspectRatio","aspectStyle","paddingBottom","undefined","__cachedSizer","$createElement","style","genContent","getSlot","h","measurableStyles","$listeners"],"sourceRoot":""}