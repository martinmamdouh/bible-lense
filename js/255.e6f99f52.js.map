{"version":3,"file":"js/255.e6f99f52.js","mappings":"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","sources":["webpack://biblical-catalyst/./src/views/canvases/CanvasPage.vue","webpack://biblical-catalyst/../../../src/components/VBreadcrumbs/VBreadcrumbsItem.ts","webpack://biblical-catalyst/../../../src/components/VBreadcrumbs/VBreadcrumbsDivider.ts","webpack://biblical-catalyst/../../../src/components/VBreadcrumbs/VBreadcrumbs.ts","webpack://biblical-catalyst/./src/components/canvases/CanvasOne.vue","webpack://biblical-catalyst/./node_modules/marked/lib/marked.esm.js","webpack://biblical-catalyst/src/components/canvases/CanvasOne.vue","webpack://biblical-catalyst/./src/components/canvases/CanvasOne.vue?3953","webpack://biblical-catalyst/./src/components/canvases/CanvasOne.vue?70a4","webpack://biblical-catalyst/src/views/canvases/CanvasPage.vue","webpack://biblical-catalyst/./src/views/canvases/CanvasPage.vue?237a","webpack://biblical-catalyst/./src/views/canvases/CanvasPage.vue?6e09"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('canvas-one',{attrs:{\"items\":_vm.items,\"category\":_vm.category}})\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import Routable from '../../mixins/routable'\n\nimport mixins from '../../util/mixins'\nimport { VNode } from 'vue'\n\n/* @vue/component */\nexport default mixins(Routable).extend({\n  name: 'v-breadcrumbs-item',\n\n  props: {\n    // In a breadcrumb, the currently\n    // active item should be dimmed\n    activeClass: {\n      type: String,\n      default: 'v-breadcrumbs__item--disabled',\n    },\n    ripple: {\n      type: [Boolean, Object],\n      default: false,\n    },\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        'v-breadcrumbs__item': true,\n        [this.activeClass]: this.disabled,\n      }\n    },\n  },\n\n  render (h): VNode {\n    const { tag, data } = this.generateRouteLink()\n\n    return h('li', [\n      h(tag, {\n        ...data,\n        attrs: {\n          ...data.attrs,\n          'aria-current': this.isActive && this.isLink ? 'page' : undefined,\n        },\n      }, this.$slots.default),\n    ])\n  },\n})\n","import { createSimpleFunctional } from '../../util/helpers'\n\nexport default createSimpleFunctional('v-breadcrumbs__divider', 'li')\n","// Styles\nimport './VBreadcrumbs.sass'\n\n// Types\nimport { VNode } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\n// Components\nimport VBreadcrumbsItem from './VBreadcrumbsItem'\nimport VBreadcrumbsDivider from './VBreadcrumbsDivider'\n\n// Mixins\nimport Themeable from '../../mixins/themeable'\n\n// Utils\nimport mixins from '../../util/mixins'\n\nexport default mixins(\n  Themeable\n  /* @vue/component */\n).extend({\n  name: 'v-breadcrumbs',\n\n  props: {\n    divider: {\n      type: String,\n      default: '/',\n    },\n    items: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<any[]>,\n    large: Boolean,\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        'v-breadcrumbs--large': this.large,\n        ...this.themeClasses,\n      }\n    },\n  },\n\n  methods: {\n    genDivider () {\n      return this.$createElement(VBreadcrumbsDivider, this.$slots.divider ? this.$slots.divider : this.divider)\n    },\n    genItems () {\n      const items = []\n      const hasSlot = !!this.$scopedSlots.item\n      const keys = []\n\n      for (let i = 0; i < this.items.length; i++) {\n        const item = this.items[i]\n\n        keys.push(item.text)\n\n        if (hasSlot) items.push(this.$scopedSlots.item!({ item }))\n        else items.push(this.$createElement(VBreadcrumbsItem, { key: keys.join('.'), props: item }, [item.text]))\n\n        if (i < this.items.length - 1) items.push(this.genDivider())\n      }\n\n      return items\n    },\n  },\n\n  render (h): VNode {\n    const children = this.$slots.default || this.genItems()\n\n    return h('ul', {\n      staticClass: 'v-breadcrumbs',\n      class: this.classes,\n    }, children)\n  },\n})\n","var render = function render(){var _vm=this,_c=_vm._self._c;return (_vm.items)?_c('v-row',{attrs:{\"dense\":\"\"}},[(_vm.$vuetify.breakpoint.smAndUp && !_vm.fullscreen)?_c('v-col',{attrs:{\"cols\":\"12\",\"sm\":_vm.fullscreen ? 1 : 3}},[_c('v-card',{staticClass:\"fixed-nav px-2\",attrs:{\"height\":\"100%\",\"flat\":\"\"}},[(!_vm.fullscreen)?_c('v-card-title',{staticClass:\"capitalize navy\",attrs:{\"primary-title\":\"\"}},[_vm._v(\" \"+_vm._s(_vm.category)+\" \")]):_vm._e(),(!_vm.fullscreen)?_c('v-card-text',{staticClass:\"scroll\"},[_c('v-list',{attrs:{\"flat\":\"\"}},[_c('v-list-item-group',{staticClass:\"maroon\",attrs:{\"value\":_vm.activeListItem,\"mandatory\":\"\"}},_vm._l((_vm.items),function(item,i){return _c('v-list-item',{key:i,staticClass:\"list-itemss\"},[_c('v-list-item-content',[_c('v-list-item-title',{on:{\"click\":function($event){_vm.selectedItem = item;\n                    _vm.onSelectItem();}}},[_c('small',[_vm._v(_vm._s(item.title))])])],1)],1)}),1)],1)],1):_c('v-card-text',{staticClass:\"scroll capitalize\"},[_c('v-btn',{attrs:{\"icon\":\"\"},on:{\"click\":function($event){_vm.fullscreen = false}}},[_c('v-icon',[_vm._v(\"mdi-arrow-right\")])],1)],1)],1)],1):_vm._e(),_c('v-col',{attrs:{\"cols\":\"11\",\"sm\":_vm.fullscreen ? 11 : 6}},[_c('v-card',{attrs:{\"width\":\"100%\",\"flat\":\"\"}},[_c('div',{staticClass:\"capitalize px-4\",class:{\n          'fixed-title-full': _vm.fullscreen,\n          'fixed-title': !_vm.fullscreen,\n        }},[_c('div',{staticClass:\"my-n4\"},[_c('v-breadcrumbs',{attrs:{\"items\":_vm.breadcrumbs,\"color\":\"red\"}})],1),_c('v-row',{staticClass:\"pb-2\",attrs:{\"dense\":\"\",\"align\":\"center\"}},[_c('v-col',{attrs:{\"sm\":\"10\",\"cols\":\"12\"}},[_c('v-select',{staticClass:\"sm-font bold\",attrs:{\"items\":_vm.items,\"item-text\":\"title\",\"label\":\"select\",\"return-object\":\"\",\"dense\":\"\",\"solo\":\"\",\"flat\":\"\",\"fill\":\"\",\"full-width\":\"\",\"hide-details\":\"\",\"color\":\"white\"},on:{\"input\":_vm.onSelectItem},model:{value:(_vm.selectedItem),callback:function ($$v) {_vm.selectedItem=$$v},expression:\"selectedItem\"}})],1),(_vm.$vuetify.breakpoint.smAndUp)?_c('v-col',{attrs:{\"cols\":\"12\",\"sm\":\"2\"}},[_c('v-btn',{staticClass:\"pr-2\",attrs:{\"color\":\"gold\",\"icon\":\"\",\"x-small\":\"\"},on:{\"click\":function($event){_vm.fullscreen = !_vm.fullscreen}}},[_c('v-icon',[_vm._v(\" \"+_vm._s(_vm.fullscreen ? \"mdi-fullscreen-exit\" : \"mdi-fullscreen\")+\" \")])],1),_c('v-btn',{staticClass:\"pr-2\",attrs:{\"color\":\"gold\",\"x-small\":\"\",\"icon\":\"\"}},[_c('v-icon',[_vm._v(\"mdi-share-variant\")])],1)],1):_vm._e()],1),_c('v-divider')],1),_c('v-card-text',{staticClass:\"card-text\"},[_c('v-img',{staticClass:\"mb-4 main-img\",attrs:{\"src\":require(\"@/assets/images/dreams.jpg\"),\"height\":\"auto\",\"width\":\"auto\"}}),(Object.keys(_vm.selectedItem.properties).length > 0)?_c('section',[_vm._l((Object.keys(_vm.selectedItem.properties)),function(key,z){return _c('div',{key:z},[_c('label',{staticClass:\"navy capitalize\"},[_vm._v(_vm._s(key)+\":\")]),_vm._v(\" \"+_vm._s(_vm.selectedItem.properties[key])+\" \")])}),_c('v-divider',{staticClass:\"my-2\"})],2):_vm._e(),(_vm.selectedItem.isMarkDown)?_c('section',[_c('div',{staticClass:\"markdown\",domProps:{\"innerHTML\":_vm._s(_vm.parseMarkDown(_vm.selectedItem.markDown))}})]):_c('section',[_c('h3',{staticClass:\"maroon\"}),_c('div',[_vm._v(_vm._s(_vm.selectedItem.interpretation))])]),(_vm.selectedItem.bibleVerses)?_c('section',{staticClass:\"mt-4\"},[_c('h3',{staticClass:\"maroon mb-4\"},[_vm._v(\" \"+_vm._s(_vm.$store.state.locale == \"ar\" ? \"آيات ذات صلة من الكتاب المقدس\" : \"Related Verses from The Bible\")+\" \")]),_vm._l((_vm.selectedItem.bibleVerses),function(verse,v){return _c('v-card',{key:v,staticClass:\"elevation-6 mb-4 verse-card\"},[_c('v-card-text',[_vm._v(\" “\"+_vm._s(verse)+\"” \")])],1)})],2):_vm._e(),(_vm.selectedItem.references.length)?_c('section',[_c('h3',{staticClass:\"maroon mb-4\"},[_vm._v(\" \"+_vm._s(_vm.$store.state.locale == \"ar\" ? \"مصادر\" : \"References\")+\" \")]),_c('ul',_vm._l((_vm.selectedItem.references),function(reference,w){return _c('li',{key:w},[_vm._v(\" \"+_vm._s(reference)+\" \")])}),0)]):_vm._e()],1)],1)],1),(!_vm.fullscreen)?_c('v-col',{staticClass:\"fixed-img\",attrs:{\"cols\":\"12\"}},[_c('v-img',{attrs:{\"src\":require(\"@/assets/images/dreams.jpg\"),\"height\":\"50%\",\"width\":\"auto\"}})],1):_vm._e()],1):_vm._e()\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/**\n * marked v11.0.0 - a markdown parser\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null\n    };\n}\nlet _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape$1(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nfunction unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        }\n    };\n    return obj;\n}\nfunction cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch (e) {\n        return null;\n    }\n    return href;\n}\nconst noopTest = { exec: () => null };\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape$1(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text)\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape$1(text)\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0]\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ {1,4}/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: cap[0]\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            const text = rtrim(cap[0].replace(/^ *>[ \\t]?/gm, ''), '\\n');\n            const top = this.lexer.state.top;\n            this.lexer.state.top = true;\n            const tokens = this.lexer.blockTokens(text);\n            this.lexer.state.top = top;\n            return {\n                type: 'blockquote',\n                raw: cap[0],\n                tokens,\n                text\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: []\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let raw = '';\n            let itemContents = '';\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                let blankLine = false;\n                if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(src)) {\n                            break;\n                        }\n                        if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLine.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLine.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n *\\n *$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: []\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = raw.trimEnd();\n            (list.items[list.items.length - 1]).text = itemContents.trimEnd();\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0]\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!/[:|]/.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(/^\\||\\| *$/g, '').split('|');\n        const rows = cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: []\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (/^ *-+: *$/.test(align)) {\n                item.align.push('right');\n            }\n            else if (/^ *:-+: *$/.test(align)) {\n                item.align.push('center');\n            }\n            else if (/^ *:-+ *$/.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (const header of headers) {\n            item.header.push({\n                text: header,\n                tokens: this.lexer.inline(header)\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map(cell => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell)\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1])\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0])\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape$1(cap[1])\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0]\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text)\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text)\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape$1(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0]\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2])\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape$1(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = escape$1(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = cap[0];\n            }\n            else {\n                text = escape$1(cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n}\n\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?: *(?:\\n|$))+/;\nconst blockCode = /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheading = edit(/^(?!bull )((?:.|\\n(?!\\s*?\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n    + '|track|ul';\nconst _comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', ' {4}[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex()\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex()\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = '\\\\p{P}$+<=>`^|~';\nconst punctuation = edit(/^((?![*_])[\\spunctuation])/, 'u')\n    .replace(/punctuation/g, _punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)[punct](_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter\n    + '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\([punct])/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex()\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    escape: edit(escape).replace('])', '~|])').getRegex(),\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex()\n};\n/**\n * exports\n */\nconst block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic\n};\nconst inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic\n};\n\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        let next;\n        while (next = this.inlineQueue.shift()) {\n            this.inlineTokens(next.src, next.tokens);\n        }\n        return this.tokens;\n    }\n    blockTokens(src, tokens = []) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        else {\n            src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n                return leading + '    '.repeat(tabs.length);\n            });\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        let lastParagraphClipped;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    code(code, infostring, escaped) {\n        const lang = (infostring || '').match(/^\\S*/)?.[0];\n        code = code.replace(/\\n$/, '') + '\\n';\n        if (!lang) {\n            return '<pre><code>'\n                + (escaped ? code : escape$1(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape$1(lang)\n            + '\">'\n            + (escaped ? code : escape$1(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote(quote) {\n        return `<blockquote>\\n${quote}</blockquote>\\n`;\n    }\n    html(html, block) {\n        return html;\n    }\n    heading(text, level, raw) {\n        // ignore IDs\n        return `<h${level}>${text}</h${level}>\\n`;\n    }\n    hr() {\n        return '<hr>\\n';\n    }\n    list(body, ordered, start) {\n        const type = ordered ? 'ol' : 'ul';\n        const startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(text, task, checked) {\n        return `<li>${text}</li>\\n`;\n    }\n    checkbox(checked) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph(text) {\n        return `<p>${text}</p>\\n`;\n    }\n    table(header, body) {\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow(content) {\n        return `<tr>\\n${content}</tr>\\n`;\n    }\n    tablecell(content, flags) {\n        const type = flags.header ? 'th' : 'td';\n        const tag = flags.align\n            ? `<${type} align=\"${flags.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong(text) {\n        return `<strong>${text}</strong>`;\n    }\n    em(text) {\n        return `<em>${text}</em>`;\n    }\n    codespan(text) {\n        return `<code>${text}</code>`;\n    }\n    br() {\n        return '<br>';\n    }\n    del(text) {\n        return `<del>${text}</del>`;\n    }\n    link(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(text) {\n        return text;\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong(text) {\n        return text;\n    }\n    em(text) {\n        return text;\n    }\n    codespan(text) {\n        return text;\n    }\n    del(text) {\n        return text;\n    }\n    html(text) {\n        return text;\n    }\n    text(text) {\n        return text;\n    }\n    link(href, title, text) {\n        return '' + text;\n    }\n    image(href, title, text) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const genericToken = token;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'space': {\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr();\n                    continue;\n                }\n                case 'heading': {\n                    const headingToken = token;\n                    out += this.renderer.heading(this.parseInline(headingToken.tokens), headingToken.depth, unescape(this.parseInline(headingToken.tokens, this.textRenderer)));\n                    continue;\n                }\n                case 'code': {\n                    const codeToken = token;\n                    out += this.renderer.code(codeToken.text, codeToken.lang, !!codeToken.escaped);\n                    continue;\n                }\n                case 'table': {\n                    const tableToken = token;\n                    let header = '';\n                    // header\n                    let cell = '';\n                    for (let j = 0; j < tableToken.header.length; j++) {\n                        cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens), { header: true, align: tableToken.align[j] });\n                    }\n                    header += this.renderer.tablerow(cell);\n                    let body = '';\n                    for (let j = 0; j < tableToken.rows.length; j++) {\n                        const row = tableToken.rows[j];\n                        cell = '';\n                        for (let k = 0; k < row.length; k++) {\n                            cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: tableToken.align[k] });\n                        }\n                        body += this.renderer.tablerow(cell);\n                    }\n                    out += this.renderer.table(header, body);\n                    continue;\n                }\n                case 'blockquote': {\n                    const blockquoteToken = token;\n                    const body = this.parse(blockquoteToken.tokens);\n                    out += this.renderer.blockquote(body);\n                    continue;\n                }\n                case 'list': {\n                    const listToken = token;\n                    const ordered = listToken.ordered;\n                    const start = listToken.start;\n                    const loose = listToken.loose;\n                    let body = '';\n                    for (let j = 0; j < listToken.items.length; j++) {\n                        const item = listToken.items[j];\n                        const checked = item.checked;\n                        const task = item.task;\n                        let itemBody = '';\n                        if (item.task) {\n                            const checkbox = this.renderer.checkbox(!!checked);\n                            if (loose) {\n                                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                                    }\n                                }\n                                else {\n                                    item.tokens.unshift({\n                                        type: 'text',\n                                        text: checkbox + ' '\n                                    });\n                                }\n                            }\n                            else {\n                                itemBody += checkbox + ' ';\n                            }\n                        }\n                        itemBody += this.parse(item.tokens, loose);\n                        body += this.renderer.listitem(itemBody, task, !!checked);\n                    }\n                    out += this.renderer.list(body, ordered, start);\n                    continue;\n                }\n                case 'html': {\n                    const htmlToken = token;\n                    out += this.renderer.html(htmlToken.text, htmlToken.block);\n                    continue;\n                }\n                case 'paragraph': {\n                    const paragraphToken = token;\n                    out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);\n                    }\n                    out += top ? this.renderer.paragraph(body) : body;\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'escape': {\n                    const escapeToken = token;\n                    out += renderer.text(escapeToken.text);\n                    break;\n                }\n                case 'html': {\n                    const tagToken = token;\n                    out += renderer.html(tagToken.text);\n                    break;\n                }\n                case 'link': {\n                    const linkToken = token;\n                    out += renderer.link(linkToken.href, linkToken.title, this.parseInline(linkToken.tokens, renderer));\n                    break;\n                }\n                case 'image': {\n                    const imageToken = token;\n                    out += renderer.image(imageToken.href, imageToken.title, imageToken.text);\n                    break;\n                }\n                case 'strong': {\n                    const strongToken = token;\n                    out += renderer.strong(this.parseInline(strongToken.tokens, renderer));\n                    break;\n                }\n                case 'em': {\n                    const emToken = token;\n                    out += renderer.em(this.parseInline(emToken.tokens, renderer));\n                    break;\n                }\n                case 'codespan': {\n                    const codespanToken = token;\n                    out += renderer.codespan(codespanToken.text);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br();\n                    break;\n                }\n                case 'del': {\n                    const delToken = token;\n                    out += renderer.del(this.parseInline(delToken.tokens, renderer));\n                    break;\n                }\n                case 'text': {\n                    const textToken = token;\n                    out += renderer.text(textToken.text);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess'\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n    parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            values = values.concat(this.walkTokens(genericToken[childTokens], callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer) || prop === 'options') {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer) || ['options', 'rules', 'lexer'].includes(prop)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks) || prop === 'options') {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    #parseMarkdown(lexer, parser) {\n        return (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            // Show warning if an extension set async to true but the parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                if (!opt.silent) {\n                    console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n                }\n                opt.async = true;\n            }\n            const throwError = this.#onError(!!opt.silent, !!opt.async);\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n            }\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                const tokens = lexer(src, opt);\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n    }\n    #onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape$1(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n//# sourceMappingURL=marked.esm.js.map\n","<template>\n  <v-row v-if=\"items\" dense>\n    <!-- Side navigatin column -->\n    <v-col\n      v-if=\"$vuetify.breakpoint.smAndUp && !fullscreen\"\n      cols=\"12\"\n      :sm=\"fullscreen ? 1 : 3\"\n    >\n      <v-card height=\"100%\" flat class=\"fixed-nav px-2\">\n        <v-card-title v-if=\"!fullscreen\" primary-title class=\"capitalize navy\">\n          {{ category }}\n        </v-card-title>\n        <v-card-text v-if=\"!fullscreen\" class=\"scroll\">\n          <v-list flat>\n            <v-list-item-group :value=\"activeListItem\" mandatory class=\"maroon\">\n              <v-list-item\n                v-for=\"(item, i) in items\"\n                :key=\"i\"\n                class=\"list-itemss\"\n              >\n                <v-list-item-content>\n                  <v-list-item-title\n                    @click=\"\n                      selectedItem = item;\n                      onSelectItem();\n                    \"\n                  >\n                    <small>{{ item.title }}</small>\n                  </v-list-item-title>\n                </v-list-item-content>\n              </v-list-item>\n            </v-list-item-group>\n          </v-list>\n        </v-card-text>\n        <v-card-text v-else class=\"scroll capitalize\">\n          <v-btn icon @click=\"fullscreen = false\">\n            <v-icon>mdi-arrow-right</v-icon>\n          </v-btn>\n        </v-card-text>\n      </v-card>\n      <!-- Main Screen 'Content' -->\n    </v-col>\n    <!-- Content column -->\n    <v-col cols=\"11\" :sm=\"fullscreen ? 11 : 6\">\n      <v-card width=\"100%\" flat>\n        <div\n          class=\"capitalize px-4\"\n          :class=\"{\n            'fixed-title-full': fullscreen,\n            'fixed-title': !fullscreen,\n          }\"\n        >\n          <div class=\"my-n4\">\n            <v-breadcrumbs :items=\"breadcrumbs\" color=\"red\" />\n          </div>\n          <v-row dense class=\"pb-2\" align=\"center\">\n            <v-col sm=\"10\" cols=\"12\">\n              <v-select\n                v-model=\"selectedItem\"\n                :items=\"items\"\n                item-text=\"title\"\n                label=\"select\"\n                return-object\n                dense\n                solo\n                flat\n                fill\n                full-width\n                hide-details\n                color=\"white\"\n                class=\"sm-font bold\"\n                @input=\"onSelectItem\"\n              ></v-select>\n            </v-col>\n\n            <v-col v-if=\"$vuetify.breakpoint.smAndUp\" cols=\"12\" sm=\"2\">\n              <v-btn\n                color=\"gold\"\n                icon\n                x-small\n                class=\"pr-2\"\n                @click=\"fullscreen = !fullscreen\"\n              >\n                <v-icon>\n                  {{ fullscreen ? \"mdi-fullscreen-exit\" : \"mdi-fullscreen\" }}\n                </v-icon>\n              </v-btn>\n              <v-btn color=\"gold\" x-small icon class=\"pr-2\">\n                <v-icon>mdi-share-variant</v-icon>\n              </v-btn>\n            </v-col>\n          </v-row>\n          <v-divider></v-divider>\n        </div>\n        <v-card-text class=\"card-text\">\n          <v-img\n            src=\"@/assets/images/dreams.jpg\"\n            height=\"auto\"\n            width=\"auto\"\n            class=\"mb-4 main-img\"\n          ></v-img>\n          <section v-if=\"Object.keys(selectedItem.properties).length > 0\">\n            <div\n              v-for=\"(key, z) in Object.keys(selectedItem.properties)\"\n              :key=\"z\"\n            >\n              <label class=\"navy capitalize\">{{ key }}:</label>\n              {{ selectedItem.properties[key] }}\n            </div>\n            <v-divider class=\"my-2\" />\n          </section>\n          <section v-if=\"selectedItem.isMarkDown\">\n            <div\n              v-html=\"parseMarkDown(selectedItem.markDown)\"\n              class=\"markdown\"\n            ></div>\n          </section>\n          <section v-else>\n            <h3 class=\"maroon\"></h3>\n            <div>{{ selectedItem.interpretation }}</div>\n          </section>\n          <section v-if=\"selectedItem.bibleVerses\" class=\"mt-4\">\n            <h3 class=\"maroon mb-4\">\n              {{\n                $store.state.locale == \"ar\"\n                  ? \"آيات ذات صلة من الكتاب المقدس\"\n                  : \"Related Verses from The Bible\"\n              }}\n            </h3>\n            <v-card\n              v-for=\"(verse, v) in selectedItem.bibleVerses\"\n              :key=\"v\"\n              class=\"elevation-6 mb-4 verse-card\"\n            >\n              <v-card-text> &ldquo;{{ verse }}&rdquo; </v-card-text>\n            </v-card>\n          </section>\n          <section v-if=\"selectedItem.references.length\">\n            <h3 class=\"maroon mb-4\">\n              {{ $store.state.locale == \"ar\" ? \"مصادر\" : \"References\" }}\n            </h3>\n            <ul>\n              <li v-for=\"(reference, w) in selectedItem.references\" :key=\"w\">\n                {{ reference }}\n              </li>\n            </ul>\n          </section>\n        </v-card-text>\n      </v-card>\n    </v-col>\n    <!-- Image column -->\n    <v-col v-if=\"!fullscreen\" cols=\"12\" class=\"fixed-img\">\n      <v-img src=\"@/assets/images/dreams.jpg\" height=\"50%\" width=\"auto\"></v-img\n    ></v-col>\n  </v-row>\n</template>\n<script>\nimport { marked } from \"marked\";\nexport default {\n  props: {\n    items: { type: Array, required: true },\n    category: { type: String, required: true },\n  },\n  data() {\n    return {\n      selectedItem: {},\n      activeListItem: {},\n      fullscreen: false,\n      ulr: null,\n      currentCategory: null,\n      breadcrumbs: [\n        {\n          text: \"Home\",\n          disabled: false,\n          href: \"homePage\",\n        },\n      ],\n    };\n  },\n  created() {\n    const itemId = this.$route.query.itemId;\n    this.selectedItem = itemId ? this.items[itemId - 1] : this.items[0];\n    this.activeListItem = itemId - 1;\n    this.url = this.$route.path;\n    this.breadcrumbs.push({\n      text: this.category,\n      disabled: true,\n      href: \"\",\n    });\n  },\n  methods: {\n    onSelectItem() {\n      this.$router.push({ query: { itemId: this.selectedItem.id } });\n    },\n    parseMarkDown(content) {\n      return marked.parse(content);\n    },\n  },\n};\n</script>\n<style>\n.scroll {\n  overflow-y: scroll;\n  height: 600px;\n}\n.capitalize {\n  text-transform: capitalize;\n}\n.list-item {\n  text-transform: capitalize;\n  font-size: 8px !important;\n}\n\nh3 {\n  margin-bottom: 2px;\n  margin-top: 2px;\n}\n.fixed-title {\n  position: fixed !important;\n  top: 70px;\n  left: 25%;\n  width: 50%;\n  background-color: white;\n  z-index: 1000;\n  /* height: 100px;\n  overflow: hidden; */\n  font-size: 14px;\n}\n.fixed-title-full {\n  position: fixed !important;\n  top: 70px;\n  width: 100%;\n  background-color: white;\n  z-index: 1000;\n  /* height: 100px;\n  overflow: hidden; */\n  font-size: 14px;\n}\n.fixed-breadcrumbs {\n  position: fixed;\n  top: 60px;\n  left: 0%;\n  width: 100%;\n  background-color: white;\n  z-index: 1000;\n}\n\n.fixed-nav {\n  position: fixed;\n  top: 70px;\n  width: 25%;\n  left: 0%;\n}\n.fixed-img {\n  position: fixed;\n  top: 13%;\n  width: 24%;\n  right: 0%;\n}\n.card-text {\n  margin-top: 80px;\n}\n.main-img {\n  display: none;\n}\n.sm-font {\n  font-size: 14px !important;\n}\n.bold {\n  font-weight: bold;\n}\n.markdown h1 {\n  color: #800000;\n  margin-bottom: 10px;\n}\n.markdown h2 {\n  color: #800000;\n  margin-bottom: 10px;\n}\n.markdown h3 {\n  color: #800000;\n  margin-bottom: 10px;\n}\nheader {\n  color: #800000;\n  margin-bottom: 10px;\n}\n.verse-card {\n  border-left: 4px solid #800000 !important;\n}\n@media (max-width: 576px) {\n  .main-img {\n    display: block;\n  }\n  .breadcrumbs {\n    height: 20px;\n    width: 100%;\n    background-color: white;\n    z-index: 1000;\n  }\n  .fixed-title,\n  .fixed-title-full {\n    position: sticky !important;\n    top: 15px;\n    left: 0%;\n    width: 100%;\n    background-color: white;\n    z-index: 10;\n    font-size: 10px;\n    line-height: 20px;\n  }\n  .fixed-nav {\n    display: none;\n  }\n  .fixed-img {\n    display: none;\n  }\n\n  .card-text {\n    margin-top: 0px;\n  }\n  .sm-font {\n    font-size: 9px !important;\n  }\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./CanvasOne.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./CanvasOne.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./CanvasOne.vue?vue&type=template&id=b6b15b6c\"\nimport script from \"./CanvasOne.vue?vue&type=script&lang=js\"\nexport * from \"./CanvasOne.vue?vue&type=script&lang=js\"\nimport style0 from \"./CanvasOne.vue?vue&type=style&index=0&id=b6b15b6c&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<template>\n  <canvas-one :items=\"items\" :category=\"category\" />\n</template>\n<script>\nimport CanvasOne from \"@/components/canvases/CanvasOne.vue\";\nimport { loadJsData } from \"@/utilities/DataLoader\";\nexport default {\n  components: { CanvasOne },\n  props: {\n    canvasType: { required: true },\n    dataSet: { type: String },\n    category: { type: String },\n  },\n  data() {\n    return { items: null };\n  },\n  created() {\n    // this.items = loadJsonData(this.dataSet)[\"en\"];\n\n    this.items = loadJsData(this.dataSet)[this.$store.state.locale];\n  },\n};\n</script>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./CanvasPage.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./CanvasPage.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./CanvasPage.vue?vue&type=template&id=42d26ee2\"\nimport script from \"./CanvasPage.vue?vue&type=script&lang=js\"\nexport * from \"./CanvasPage.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","attrs","items","category","staticRenderFns","mixins","Routable","extend","name","props","activeClass","type","String","default","ripple","Boolean","Object","computed","classes","disabled","h","tag","data","generateRouteLink","isActive","isLink","undefined","$slots","createSimpleFunctional","Themeable","divider","Array","large","themeClasses","methods","genDivider","$createElement","VBreadcrumbsDivider","genItems","hasSlot","$scopedSlots","item","keys","i","length","push","text","VBreadcrumbsItem","key","join","children","staticClass","class","fullscreen","on","selectedItem","_v","breadcrumbs","model","callback","expression","$event","z","_e","domProps","w","require","_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","_defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape$1","html","encode","test","replace","unescapeTest","_","n","toLowerCase","charAt","fromCharCode","parseInt","substring","caret","edit","regex","opt","obj","val","valSource","getRegex","cleanUrl","href","encodeURI","e","noopTest","exec","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","trim","shift","pop","splice","rtrim","c","invert","l","suffLen","currChar","slice","findClosingBracket","b","indexOf","level","outputLink","cap","link","raw","lexer","title","state","inLink","token","tokens","inlineTokens","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","_Tokenizer","options","rules","constructor","space","src","block","newline","code","codeBlockStyle","fences","lang","inline","anyPunctuation","heading","trimmed","depth","hr","blockquote","top","blockTokens","list","bull","isordered","ordered","start","loose","itemRegex","itemContents","endsWithBlankLine","endEarly","line","t","repeat","nextLine","indent","trimStart","search","blankLine","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","rawLine","ischecked","istask","task","checked","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","def","table","headers","aligns","rows","header","align","cell","lheading","paragraph","escape","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","reflink","links","nolink","linkString","emStrong","maskedSrc","prevChar","emStrongLDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","emStrongRDelimAst","emStrongRDelimUnd","lastIndex","lastCharLength","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","blockCode","bullet","_paragraph","blockText","_blockLabel","_tag","_comment","blockNormal","gfmTable","blockGfm","blockPedantic","inlineCode","_punctuation","blockSkip","_inlineComment","_inlineLabel","reflinkSearch","inlineNormal","inlinePedantic","inlineGfm","inlineBreaks","normal","_Lexer","inlineQueue","create","static","lex","next","lastToken","cutSrc","lastParagraphClipped","leading","tabs","extTokenizer","call","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keepPrevChar","includes","lastIndexOf","startInline","_Renderer","infostring","quote","body","startatt","listitem","checkbox","tablerow","content","tablecell","flags","strong","em","cleanHref","out","image","_TextRenderer","_Parser","textRenderer","parser","parse","parseInline","renderers","genericToken","ret","headingToken","codeToken","tableToken","j","k","blockquoteToken","listToken","itemBody","unshift","htmlToken","paragraphToken","textToken","escapeToken","tagToken","linkToken","imageToken","strongToken","emToken","codespanToken","delToken","_Hooks","Set","preprocess","markdown","postprocess","Marked","defaults","setOptions","lexInline","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","args","use","values","concat","childTokens","pack","opts","ext","prevRenderer","apply","extLevel","prop","rendererProp","rendererFunc","tokenizerProp","tokenizerFunc","prevTokenizer","hooksProp","hooksFunc","prevHook","passThroughHooks","has","arg","Promise","resolve","then","packWalktokens","origOpt","warn","throwError","prototype","toString","all","catch","message","msg","reject","markedInstance","marked","getDefaults","required","activeListItem","ulr","currentCategory","created","itemId","$route","query","path","onSelectItem","$router","id","parseMarkDown","component","components","CanvasOne","canvasType","dataSet","loadJsData","$store","locale"],"sourceRoot":""}